commonfields:
  id: 7246a027-7c21-41a3-8ac4-120f2119d179
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    propagationLabels:
    - all
    toServerVersion: ""
dependson:
  must: []
  should: []
dockerimage: demisto/python3:3.10.7.35188
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SOCaaS-HandleXsoarPortalMirroring
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SOCaaS-HandleXsoarPortalMirroring', 'start', __line__())


  import json
  import traceback

  def main():
      try:
          id = demisto.context()["MSSPortal"]["CaseInfo"]["id"]
          findCaseResult = demisto.executeCommand("mssportal-find-case", {'id_': id})
          if is_error(findCaseResult):
              return_error(findCaseResult)
          else:
              case = findCaseResult[0]['Contents']
              if((not case['nbTelusPendingTasks'] or case['nbTelusPendingTasks'] == 0) and case['nbCustomerClosedTasks'] == case['nbCustomerTasks']):
                  demisto.executeCommand("mssportal-resolve-case", {'id_': id, 'caseresolution_resolutionnotes':'Closure via mirroring'})
                  #use xdr out of box command to close incident.
                  print(f'Case({case["id"]}) resolved')
              else:
                  raise DemistoException('The incident cannot be resolved until all the tasks are closed on mssportal.')

      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute HandleXsoarPortalMirroring. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()


  register_module_line('SOCaaS-HandleXsoarPortalMirroring', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- post-processing
type: python
